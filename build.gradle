group 'com.lohika.apm.portal'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'docker-compose'

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext {
    springBootVersion = '1.5.4.RELEASE'
    jUnitVersion = 4.12
}

jar {
    baseName = 'my-task'
    version =  '0.1.0'
}

// This is used as the docker image prefix (org)

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion"){
        exclude module: 'spring-boot-starter-tomcat'
    }
//    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
//    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
//    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile "junit:junit:${jUnitVersion}"
}

// tag::task[]
task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/apps/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
//            from './src/main/docker/mongo'
//            into stageDir
//
        }
    }
}

compileJava.doFirst{
    copy {
          from './src/main/docker/mongo-seed'
          into './build/libs'
          include '**/*.json'
    }
}


// end::task[]
bootRun {
    addResources = true
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.21"
    }
}

dockerCompose.isRequiredBy(test) // hooks 'dependsOn composeUp' and 'finalizedBy composeDown'

dockerCompose {
    // useComposeFiles = ['docker-compose.yml', 'docker-compose.prod.yml'] // like 'docker-compose -f <file>'
    // captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
     stopContainers = true // doesn't call `docker-compose down` - useful for debugging
     removeContainers = true
     removeImages = "All" // Def: "None". Other accepted values are: "All" and "Local"
     removeVolumes = true
    // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to directory name)
    // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (usefull if not present in PATH)
    // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (usefull if not present in PATH)
    // environment.put 'BACKEND_ADDRESS', '192.168.1.100' // Pass environment variable to 'docker-compose' for substitution in compose file
}

test.doFirst {
    // exposes "${serviceName}_HOST" and "${serviceName}_TCP_${exposedPort}" environment variables
    // for example exposes "WEB_HOST" and "WEB_TCP_80" environment variables for service named `web` with exposed port `80`
    dockerCompose.exposeAsEnvironment(test)
    // exposes "${serviceName}.host" and "${serviceName}.tcp.${exposedPort}" system properties
    // for example exposes "web.host" and "web.tcp.80" system properties for service named `web` with exposed port `80`
    dockerCompose.exposeAsSystemProperties(test)
    // get information about container of service `web` (declared in docker-compose.yml)
    def webInfo = dockerCompose.servicesInfos.web
    // pass host and exposed TCP port 80 as custom-named Java System properties
//    systemProperty 'myweb.host', webInfo.host
//    systemProperty 'myweb.port', webInfo.ports[80]
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
